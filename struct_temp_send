#include <RFM69.h>
#include <SPI.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <JeeLib.h>
#include <avr/sleep.h>
#include <EEPROM.h>

#define sDesc "Falco Manager Node"
#define sVersion "v0.5.5"
#define hVersion "v0.5.0"

/*
EEPROM addresses
0 = Status 1
1 = Status 2
2 = Node
3 = Network
4 -> 19 Key
*/

//#define DEBUG_ON
//#define DEBUG_MIN

#define ONE_WIRE_BUS 8
#define ONE_WIRE_POW 9
#define TEMPERATURE_PRECISION 12

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
int numberOfDevices;
DeviceAddress tempDeviceAddress;
 
volatile bool adcDone;
ISR(ADC_vect) {
  adcDone = true;
}
ISR(WDT_vect) {
  Sleepy::watchdogEvent();
}
volatile int f_timer = 0;

#define NODEID        5
#define NODEID_SU     1
#define NETWORKID     100
#define NETWORKID_SU  1
#define GATEWAYID     31
#define FREQUENCY     RF69_868MHZ //Match this with the version of your Moteino! (others: RF69_433MHZ, RF69_868MHZ)
#define KEY_SU        "setup1EncryptKey" //has to be same 16 characters/bytes on all nodes, not more not less!
#define LED           13
//#define RADIOSW     4
//#define LED_PIN (13)
#define SERIAL_BAUD   57600
#define ACK_TIME      450  // # of ms to wait for an ack was 30

bool promiscuousMode = false;

#define EV0 999
#define tMin -20
#define tMax 80
int tT0 = 999;
int maxT = 999;
int minT = 999;

byte resetT = 0; // reset max / min

//int TRANSMITPERIOD = 60000; //transmit a packet to gateway so often (in ms)
int TRANSMITPERIOD = 54980; // was 54750 // 54850 // 54900 // 54950 // 54975 //*54580*//?54985?// 55000 // 55015 // 55025 // 55050 // 55100
//byte sendSize = 0;
//boolean requestACK = false;
//SPIFlash flash(8, 0xEF30); //EF40 for 16mbit windbond chip
RFM69 radio;
//bool waitForRF = 0;

typedef struct {
  uint8_t   v1[2]; // node, tran
  int16_t   v2[9]; // battery or network, v1 -> v8
} VPayload;
VPayload theVData;


//long lastPeriod = -1;
bool addNode = 0;
int nodeIDRF = NODEID_SU;
int networkIDRF = NETWORKID_SU;
char keyRF[17];
//char setupData[10];
byte packetCount = 0;
int rfDelay1 = 400;
int rfDelay2 = 10;
int rfCDelay = 60;
int rfC = 0; 
byte noWait = 0;



// *** SETUP ***
// *** SETUP ***
// *** SETUP ***
void setup() {
  Serial.begin(SERIAL_BAUD);
  Serial.print("Software description: ");
  Serial.println(sDesc);
  Serial.print("Software version: ");
  Serial.println(sVersion);
  Serial.print("Hardware version: ");
  Serial.println(hVersion);
  
  #ifndef DEBUG_ON
  Serial.print("\nDEBUG_ON output disabled");
  #else
  Serial.print("\nDEBUG_ON output enabled");
  #endif
  #ifndef DEBUG_MIN
  Serial.println("\nDEBUG_MIN output disabled");
  #else
  Serial.println("\nDEBUG_MIN output enabled");
  #endif  

  pinMode(3, INPUT);
  pinMode(ONE_WIRE_POW, OUTPUT);
  digitalWrite(ONE_WIRE_POW, HIGH);
 
  
  addNode = digitalRead(3);
  #ifdef DEBUG_ON
  Serial.print("\naddNode = ");
  Serial.println(addNode);
  #endif
  
  //pinMode(RADIOSW, OUTPUT);
  //digitalWrite(RADIOSW, HIGH);
  initializeRF();

  byte temperature =  radio.readTemperature(-1); // -1 = user cal factor, adjust for correct ambient
  byte fTemp = 1.8 * temperature + 32; // 9/5=1.8
  #ifdef DEBUG_ON
  Serial.print( "Radio Temp is ");
  Serial.print(temperature);
  Serial.print("C, ");
  Serial.print(fTemp); //converting to F loses some resolution, obvious when C is on edge between 2 values (ie 26C=78F, 27C=80F)
  Serial.println("F");
  #endif
  
  cli();
  CLKPR = bit(CLKPCE);
  sei();
  
  sensors.begin();
  numberOfDevices = sensors.getDeviceCount();

  #ifdef DEBUG_ON
  Serial.print("Locating DS18B20 devices... ");
  Serial.print("Found ");
  Serial.print(numberOfDevices, DEC);
  Serial.println(" device/s.");
  Serial.print("Parasite power is: ");
  if (sensors.isParasitePowerMode()) 
    Serial.println("ON");
  else 
    Serial.println("OFF");
  #endif
  
  for (int i = 0; i < numberOfDevices; i++)
  {
    if (sensors.getAddress(tempDeviceAddress, i))
    {
      #ifdef DEBUG_ON
      Serial.print("Found device ");
      Serial.print(i, DEC);
      Serial.print(" with address: ");
      printAddress(tempDeviceAddress);
      Serial.println("");
      Serial.print("Setting resolution to ");
      Serial.println(TEMPERATURE_PRECISION, DEC);
      #endif
      sensors.setResolution(tempDeviceAddress, TEMPERATURE_PRECISION);
      #ifdef DEBUG_ON
      Serial.print("Resolution actually set to: ");
      Serial.println(sensors.getResolution(tempDeviceAddress), DEC);
      Serial.println("");
      #endif
    } else {
      #ifdef DEBUG_ON
      Serial.print("Found ghost device at ");
      Serial.print(i, DEC);
      Serial.println(" but could not detect address. Check power and cabling");
      Serial.println("");
      #endif
    }
  }

}



// *** LOOP ***
// *** LOOP ***
// *** LOOP ***
void loop() {

  /*
  addNode = digitalRead(3);
  if (addNode == 1) 
  {
    #ifdef DEBUG_MIN
    Serial.print("\n addNode = ");
    Serial.println(addNode);
    #endif
    initializeRF();
  }
  */
  
  // theVData.v1[0] = NODEID;
  theVData.v1[0] = nodeIDRF;
  readVcc();
  calcT();
  prDataOut();
  
  if (radio.sendWithRetry(GATEWAYID, (const void*)(&theVData), sizeof(theVData)), 1)  // works??
  {
    #ifdef DEBUG_ON
    Serial.print(" RF ok");
    #endif
  }
  else
  {
    #ifdef DEBUG_MIN
    Serial.print(" RF not ok");
    #endif
  }

  //radio.receiveDone(); // not sure if this will help - makes no difference
  delay(rfDelay1);
  rfC = 0;
  packetCount = 0;

  theVData.v1[0] = 0; //node
  theVData.v1[1] = 0; //tran
  
  while (rfC < rfCDelay) {
    if (radio.receiveDone() && radio.DATALEN == sizeof(VPayload)) // ONLY works if adequate delay else get data from previous transmission??/
    {
    theVData = *(VPayload*)radio.DATA; 
    prDataIn(); // save data so can send ACk and then print
    prDataIn90(); 
    
    if (radio.ACK_REQUESTED)
    {
      radio.sendACK();
      #ifdef DEBUG_MIN
      Serial.print("\n - ACK sent.");
      #endif
    } else {
      #ifdef DEBUG_MIN
      Serial.print("\n - NO ACK sent.");
      #endif
    }
    //prDataIn();
    
    //if ((theVData.v1[1] == 3) && (theVData.v1[0] == NODEID)) // tran = 3
    if ((theVData.v1[1] == 3) && (theVData.v1[0] == nodeIDRF)) // tran = 3
    {
      prDataIn3();
      break;
    }
 
    //if ((theVData.v1[1] == 90) && (theVData.v1[0] == NODEID)) // tran = 90
    if ((theVData.v1[1] == 90) && (addNode == 1)) // tran = 90
    {
      saveRFConfig();
      prDataIn90();
      addNode = 0; //moved to end so new temp sent immediately
      noWait = 1;
      initializeRF();
      break;
    }

    //if ((theVData.v1[1] == 99) && (theVData.v1[0] == NODEID)) // tran = 99
    if ((theVData.v1[1] == 99) && (theVData.v1[0] == nodeIDRF)) // tran = 99
    {
      resetT = 1;
      prDataIn99();
      break;
    }

    if (rfC < rfCDelay) delay(rfDelay2);
    }
    rfC++;
  }
  
  Serial.flush();

  if (noWait == 1)
  {
    noWait = 0;
    delay(10000);  //?
  } 
  else 
  {
    radio.sleep();
    Sleepy::loseSomeTime(TRANSMITPERIOD);
  }
  //}
}

// *** End LOOP ***
// *** End LOOP ***
// *** End LOOP ***



// FUNCTION Blink (blink a led)
/*
void Blink(byte PIN, int DELAY_MS)
{
  pinMode(PIN, OUTPUT);
  digitalWrite(PIN, HIGH);
  delay(DELAY_MS);
  digitalWrite(PIN, LOW);
}
*/



// FUNCTION printAddress (print a DS18B20 device address)
void printAddress(DeviceAddress deviceAddress)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    if (deviceAddress[i] < 16) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}


// FUNCTION readVcc (read the battery voltage)
  long readVcc() {
  long result;
  set_sleep_mode(SLEEP_MODE_ADC);
  // Read 1.1V reference against AVcc
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  delay(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Convert
  while (bit_is_set(ADCSRA, ADSC));
  result = ADCL;
  result |= ADCH << 8;
  result = 1126400L / result; // Back-calculate AVcc in mV
  theVData.v2[0] = result; // batt
  //sleep_mode();
  return result;
}



// FUNCTION calcT (calculate temperature and set max and min etc)
  void calcT() {
  digitalWrite(ONE_WIRE_POW, HIGH);
  delay(5);
  sensors.begin();
  sensors.getAddress(tempDeviceAddress, 0);
  sensors.setResolution(tempDeviceAddress, 12);
  sensors.requestTemperatures();

  tT0 = EV0;
  float tempC = EV0;
  tempC = sensors.getTempC(tempDeviceAddress);
  digitalWrite(ONE_WIRE_POW, LOW);

  if ((tempC < tMin) || (tempC > tMax)) {
    tT0 = EV0;
  } else {
    tT0 = tempC * 100; // avoids dealing with rounding
  }

  if (tT0 != 999) {
    if ((tT0 >= maxT) || (maxT == EV0)) {
      maxT = tT0;
    }
    if ((tT0 <= minT) || (minT == EV0)) {
      minT = tT0;
    }
  }

  theVData.v2[1] = tT0;

  if (resetT == 1) {
    maxT = tT0;
    minT = tT0;
    resetT = 0;
    #ifdef DEBUG_MIN
    Serial.println(" -> Max / Min reset");
    #endif
  }

  if (addNode != 1)
    theVData.v1[1] = 2; // tran = 2 (temperature reading)
  else
    theVData.v1[1] = 90; // tran = 2 (temperature reading)
  theVData.v2[3] = maxT;
  theVData.v2[2] = minT;
  #ifdef DEBUG_ON
  Serial.print("\nTemp / Min / Max: ");
  Serial.print(tT0);
  Serial.print(" / ");
  Serial.print(minT);
  Serial.print(" / ");
  Serial.println(maxT);
  #endif
}


void initializeRF()
{
  if (addNode == 1)
  {
    nodeIDRF = NODEID_SU;
    networkIDRF = NETWORKID_SU;
    keyRF[0] = 's';
    keyRF[1] = 'e';
    keyRF[2] = 't';
    keyRF[3] = 'u';
    keyRF[4] = 'p';
    keyRF[5] = '1';
    keyRF[6] = 'E';
    keyRF[7] = 'n';
    keyRF[8] = 'c';
    keyRF[9] = 'r';
    keyRF[10] = 'y';
    keyRF[11] = 'p';
    keyRF[12] = 't';
    keyRF[13] = 'K';
    keyRF[14] = 'e';
    keyRF[15] = 'y';
    keyRF[16] = '\0'; 
  } 
  
  if (addNode == 0)
  {
    nodeIDRF = EEPROM.read(2);
    networkIDRF = EEPROM.read(3);
    for (int i = 4; i < 20; i++)
    {
      int x = i - 4;
      keyRF[x] = EEPROM.read(i);
    }  
    keyRF[16] = '\0';
  }
  
  radio.initialize(FREQUENCY, nodeIDRF, networkIDRF);
  radio.setHighPower(); //uncomment only for RFM69HW!
  radio.encrypt(keyRF);
  radio.promiscuous(promiscuousMode);
  #ifdef DEBUG_MIN
  Serial.print( "\n nodeIDRF / networkIDRF / keyRF: ");
  Serial.print(nodeIDRF);
  Serial.print(" | ");
  Serial.print(networkIDRF);  
  Serial.print(" [");  
  Serial.print(keyRF);  
  Serial.println("]");
  Serial.print(" addNode = ");  
  Serial.print(addNode);
  char buff[50];
  sprintf(buff, "\n Transmitting at %d Mhz...", FREQUENCY == RF69_433MHZ ? 433 : FREQUENCY == RF69_868MHZ ? 868 : 915);
  Serial.print(buff);
  #endif  
  //addNode = 0;

}



void saveRFConfig()
{
  #ifdef DEBUG_MIN
  Serial.println("\n SAVE TO EEPROM");
  #endif
  int addr1 = 2;
  int addr2 = 3;  
  if (EEPROM.read(addr1) != theVData.v1[0])
  {
    EEPROM.write(addr1, theVData.v1[0]); // node
    #ifdef DEBUG_MIN
    Serial.print(addr1);
    Serial.print(" ");
    Serial.println(theVData.v1[0]);
    #endif
  }
  if (EEPROM.read(addr2) != theVData.v2[0])
  {
    EEPROM.write(addr2, theVData.v2[0]);  // network
    #ifdef DEBUG_MIN
    Serial.print(addr2);
    Serial.print(" ");
    Serial.println(theVData.v2[0]);
    #endif
  }

  #ifdef DEBUG_ON
  Serial.println(" KEY ");
  #endif
  for (int i = 1; i < 9; i++)
  {
    int16_t sKey = theVData.v2[i];
    char lo2 = sKey & 0xFF;
    char hi2 = sKey >> 8;
    addr1 = addr1 + 2;
    addr2 = addr2 + 2;    
    if (EEPROM.read(addr1) != lo2)
    {
      EEPROM.write(addr1, lo2);
      #ifdef DEBUG_MIN
      Serial.print(addr1);
      Serial.print(" ");
      Serial.println(lo2);
      #endif
    }
    if (EEPROM.read(addr2) != hi2)
    {
      EEPROM.write(addr2, hi2);
      #ifdef DEBUG_MIN
      Serial.print(addr2);
      Serial.print(" ");
      Serial.println(hi2);
      #endif
    }
    //Serial.print("i | addr1 | addr2 ");
    #ifdef DEBUG_ON
    Serial.print(" ");
    Serial.print(addr1);
    Serial.print(" | ");
    Serial.print(addr2);
    Serial.print(": ");
    Serial.print(lo2);
    Serial.print(" | ");
    Serial.println(hi2);
    #endif
  }
}



void prDataOut()
{
  unsigned long msc = millis();
  uint16_t msSec = msc / 60000;
  uint16_t ms = msc % 60000; 
  Serial.print("\n\nMinute: ");
  Serial.print(msSec);
  Serial.print(" Millisec: ");
  Serial.print(ms);
  #ifdef DEBUG_MIN
  Serial.print(": addNode = ");
  Serial.print(addNode);
  Serial.print(": Node = ");
  Serial.print(theVData.v1[0]);
  Serial.println(";");
  Serial.print(" Tran = ");
  Serial.print(theVData.v1[1]);
  Serial.print("; Batt = ");
  Serial.print(theVData.v2[0]);
  Serial.print("; Value1 = ");
  Serial.print(theVData.v2[1]);
  Serial.print("; Value2 = ");
  Serial.print(theVData.v2[2]);
  Serial.print("; Value3 = ");
  Serial.print(theVData.v2[3]);
  Serial.print("; Value4 = ");
  Serial.print(theVData.v2[4]);
  Serial.print("");
  #endif
}



void prDataIn()
{
  #ifdef DEBUG_MIN
  Serial.print("\n [");
  Serial.print(++packetCount);
  Serial.print("]");
  Serial.print(" [");
  Serial.print(radio.SENDERID, DEC);
  Serial.print("] ");
  //if (!promiscuousMode)
  //{
    Serial.print("to [");
    Serial.print(radio.TARGETID, DEC);
    Serial.print("]");
  //}
  #endif
  #ifdef DEBUG_ON
  for (byte i = 0; i < radio.DATALEN; i++)
  {
  if (i == 8) Serial.println();
  Serial.print(" [");
  Serial.print(i);
  Serial.print(":");
  Serial.print((char)radio.DATA[i]);
  Serial.print("|");
  char x = (char)radio.DATA[i];
  Serial.print(x, DEC);
  Serial.print("] ");
  }
  Serial.print("\n [RX_RSSI:");
  Serial.print(radio.RSSI);
  Serial.print("]");
  
  Serial.print("[DATALEN:");
  Serial.print(radio.DATALEN);
  Serial.print("]");
  #endif
}



void prDataIn3()
{
prDataIn99();
}



void prDataIn90()
{
  #ifdef DEBUG_MIN
  Serial.print("\n rfC delay = ");
  Serial.print(rfDelay1 + (rfC * rfDelay2));
  Serial.print("ms -> ACK (tran = ");
  Serial.print(theVData.v1[1]);
  Serial.print(") Received data: [Node = ");
  Serial.print(theVData.v1[0]);
  Serial.print(", Tran = ");
  Serial.print(theVData.v1[1]);
  Serial.print(", Network = ");
  Serial.print(theVData.v2[0]);
  Serial.print("]");
  #endif
  #ifdef DEBUG_ON
  Serial.print(" [V1 = ");
  Serial.print(theVData.v2[1]);
  Serial.print(", V2 = ");
  Serial.print(theVData.v2[2]);
  Serial.print(", V3 = ");
  Serial.print(theVData.v2[3]);
  Serial.print(", V4 = ");
  Serial.print(theVData.v2[4]);
  Serial.print(", V5 = ");
  Serial.print(theVData.v2[5]);
  Serial.print(", V6 = ");
  Serial.print(theVData.v2[6]);
  Serial.print(", V7 = ");
  Serial.print(theVData.v2[7]);
  Serial.print(", V8 = ");
  Serial.print(theVData.v2[8]);
  Serial.print("]");
  #endif
  #ifdef DEBUG_ON
  String pw = "";      
  pw = String(char(theVData.v2[1] & 0xFF));
  pw = pw + String(char(theVData.v2[1] >> 8));
  pw = pw + String(char(theVData.v2[2] & 0xFF));
  pw = pw + String(char(theVData.v2[2] >> 8));
  pw = pw + String(char(theVData.v2[3] & 0xFF));
  pw = pw + String(char(theVData.v2[3] >> 8));
  pw = pw + String(char(theVData.v2[4] & 0xFF));
  pw = pw + String(char(theVData.v2[4] >> 8));
  pw = pw + String(char(theVData.v2[5] & 0xFF));
  pw = pw + String(char(theVData.v2[5] >> 8));
  pw = pw + String(char(theVData.v2[6] & 0xFF));
  pw = pw + String(char(theVData.v2[6] >> 8));
  pw = pw + String(char(theVData.v2[7] & 0xFF));
  pw = pw + String(char(theVData.v2[7] >> 8));
  pw = pw + String(char(theVData.v2[8] & 0xFF));
  pw = pw + String(char(theVData.v2[8] >> 8));
  pw = pw + String(char('\0'));
  Serial.print("\n [");
  Serial.print(pw);
  Serial.print("] ");
  #endif
}



void prDataIn99()
{
  #ifdef DEBUG_ON
  Serial.print("\n rfC delay = ");
  Serial.print(rfDelay1 + (rfC * rfDelay2));
  Serial.print("ms -> ACK sent (tran = ");
  Serial.print(theVData.v1[1]);
  Serial.print(") Received data: [NODE = ");
  Serial.print(theVData.v1[0]);
  Serial.print(", Tran = ");
  Serial.print(theVData.v1[1]);    
  Serial.print("] ");
  #endif
}
